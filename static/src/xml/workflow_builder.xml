<?xml version="1.0" encoding="UTF-8"?>
<odoo>

    <t t-name="api_workflow_builder.WorkflowBuilder" owl="1">
        <div class="workflow-builder-container">
            <!-- Left Panel - Node Library -->
            <div class="node-library">
                <div class="library-header">
                    <div class="library-title">🧩 Workflow Nodes</div>
                    <div class="library-subtitle">Drag to canvas to build your API workflow</div>
                </div>

                <div class="node-category">
                    <div class="category-title">
                        <span class="category-icon">🚀</span>
                        Flow Control
                    </div>

                    <div class="node-template" draggable="true" data-type="start">
                        <div class="node-template-header">
                            <div class="node-template-icon">▶️</div>
                            <div class="node-template-name">Start</div>
                        </div>
                        <div class="node-template-desc">Begin your workflow</div>
                    </div>

                    <div class="node-template" draggable="true" data-type="end">
                        <div class="node-template-header">
                            <div class="node-template-icon">🏁</div>
                            <div class="node-template-name">End</div>
                        </div>
                        <div class="node-template-desc">Complete workflow</div>
                    </div>
                </div>

                <div class="node-category">
                    <div class="category-title">
                        <span class="category-icon">🔌</span>
                        API Setup
                    </div>
                    <div class="node-template" draggable="true" data-type="endpoint">
                        <div class="node-template-header">
                            <div class="node-template-icon">🌐</div>
                            <div class="node-template-name">API Endpoint</div>
                        </div>
                        <div class="node-template-desc">Set API URL and type</div>
                    </div>
                    <div class="node-template" draggable="true" data-type="auth">
                        <div class="node-template-header">
                            <div class="node-template-icon">🔐</div>
                            <div class="node-template-name">Authentication</div>
                        </div>
                        <div class="node-template-desc">API security setup</div>
                    </div>
                </div>

                <div class="node-category">
                    <div class="category-title">
                        <span class="category-icon">📡</span>
                        HTTP Methods
                    </div>
                    <div class="node-template" draggable="true" data-type="get">
                        <div class="node-template-header">
                            <div class="node-template-icon">📥</div>
                            <div class="node-template-name">GET</div>
                        </div>
                        <div class="node-template-desc">Retrieve data</div>
                    </div>
                    <div class="node-template" draggable="true" data-type="post">
                        <div class="node-template-header">
                            <div class="node-template-icon">📤</div>
                            <div class="node-template-name">POST</div>
                        </div>
                        <div class="node-template-desc">Send new data</div>
                    </div>
                    <div class="node-template" draggable="true" data-type="put">
                        <div class="node-template-header">
                            <div class="node-template-icon">✏️</div>
                            <div class="node-template-name">PUT</div>
                        </div>
                        <div class="node-template-desc">Update data</div>
                    </div>
                    <div class="node-template" draggable="true" data-type="delete">
                        <div class="node-template-header">
                            <div class="node-template-icon">🗑️</div>
                            <div class="node-template-name">DELETE</div>
                        </div>
                        <div class="node-template-desc">Remove data</div>
                    </div>
                </div>

                <div class="node-category">
                    <div class="category-title">
                        <span class="category-icon">⚙️</span>
                        Request Components
                    </div>
                    <div class="node-template" draggable="true" data-type="params">
                        <div class="node-template-header">
                            <div class="node-template-icon">❓</div>
                            <div class="node-template-name">Query Parameters</div>
                        </div>
                        <div class="node-template-desc">URL query parameters</div>
                    </div>
                    <div class="node-template" draggable="true" data-type="headers">
                        <div class="node-template-header">
                            <div class="node-template-icon">📋</div>
                            <div class="node-template-name">Custom Headers</div>
                        </div>
                        <div class="node-template-desc">HTTP headers</div>
                    </div>
                    <div class="node-template" draggable="true" data-type="body">
                        <div class="node-template-header">
                            <div class="node-template-icon">📝</div>
                            <div class="node-template-name">Request Body</div>
                        </div>
                        <div class="node-template-desc">JSON request body</div>
                    </div>
                </div>
            </div>

            <!-- Middle Panel - Canvas -->
            <div class="canvas-container">
                <div class="canvas-header">
                    <div class="canvas-title">🎨 API Workflow Canvas</div>
                    <div class="canvas-subtitle">Drag nodes here and connect them to create your workflow</div>
                    <div class="workflow-controls">
                        <button class="control-btn" t-on-click="clearCanvas">🗑️ Clear</button>
                        <button class="control-btn" t-on-click="loadSample">📋 Sample</button>
                        <button class="control-btn" t-on-click="testWorkflow">🧪 Test</button>
                        <button class="control-btn" t-on-click="exportWorkflow">💾 Export</button>
                        <label class="control-btn" style="cursor: pointer; margin: 0;">
                            📁 Import
                            <input type="file" accept=".json" style="display: none;" t-on-change="importWorkflow"/>
                        </label>
                        <button class="control-btn" t-on-click="saveWorkflow">💾 Save</button>
                    </div>
                </div>

                <div class="canvas"
                     t-ref="canvas"
                     t-on-drop="onDrop"
                     t-on-dragover="onDragOver"
                     t-on-dragleave="onDragLeave"
                     t-on-click="deselectAllNodes">

                    <div class="instructions" t-if="state.showInstructions">
                        <h3>🚀 Build Your API Workflow</h3>
                        <p>
                            <strong>Step 1:</strong>
                            Drag "Start" node here
                        </p>
                        <p>
                            <strong>Step 2:</strong>
                            Add "API Endpoint" node
                        </p>
                        <p>
                            <strong>Step 3:</strong>
                            Choose HTTP method (GET, POST, etc.)
                        </p>
                        <p>
                            <strong>Step 4:</strong>
                            Click nodes to configure in right panel
                        </p>
                        <p>
                            <strong>Step 5:</strong>
                            Connect nodes and test!
                        </p>
                    </div>
                </div>
            </div>

            <!-- Right Panel - Configuration -->
            <div class="config-panel">
                <div class="config-header">
                    <div class="config-title">⚙️ Node Settings</div>
                    <div class="config-subtitle">Select a node to configure its parameters</div>
                </div>

                <div class="config-content">
                    <t t-if="state.selectedNode">
                        <t t-set="nodeConfig" t-value="state.nodeConfigs[state.selectedNode]"/>
                        <t t-if="nodeConfig">
                            <!-- Start Node Config -->
                            <t t-if="nodeConfig.type === 'start'">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">▶️</span>
                                        Start Configuration
                                    </div>
                                    <div class="help-text">This is the entry point of your workflow. No configuration
                                        needed here, but the node must be present.
                                    </div>
                                    <div style="text-align: center; padding: 20px; background: rgba(40, 167, 69, 0.1); border-radius: 6px; color: #28a745;">
                                        ✅ Workflow starts here
                                    </div>
                                </div>
                            </t>

                            <!-- End Node Config -->
                            <t t-if="nodeConfig.type === 'end'">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">🏁</span>
                                        End Configuration
                                    </div>
                                    <div class="help-text">This marks the final node in your workflow chain.</div>
                                    <div style="text-align: center; padding: 20px; background: rgba(220,53,69,0.1); border-radius: 6px; color: #dc3545;">
                                        🛑 Workflow ends here
                                    </div>
                                </div>
                            </t>

                            <!-- Endpoint Node Config -->
                            <t t-if="nodeConfig.type === 'endpoint'">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">🌐</span>
                                        Endpoint Details
                                    </div>
                                    <label class="config-label">API URL Path</label>
                                    <input type="text"
                                           class="config-input"
                                           placeholder="/api/users"
                                           t-att-value="nodeConfig.config.url || ''"
                                           t-on-input="(ev) => this.updateNodeConfig(state.selectedNode,
                                           'url', ev.target.value)"/>
                                    <div class="help-text">The relative path or full URL for the API call.</div>
                                </div>

                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">🗄️</span>
                                        Base API Setup
                                    </div>
                                    <label class="config-label">Base API URL</label>
                                    <input type="text"
                                           class="config-input"
                                           placeholder="https://api.example.com"
                                           t-att-value="nodeConfig.config.baseUrl || ''"
                                           t-on-input="(ev) => this.updateNodeConfig(state.selectedNode,'baseUrl', ev.target.value)"/>
                                    <div class="help-text">The common base URL for all API calls in the workflow.</div>
                                </div>

                                <!-- Authentication Configuration -->
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">🔐</span>
                                        Authentication Configuration
                                    </div>
                                    <label class="config-label">Auth Type</label>
                                    <select class="config-select"
                                            t-att-value="nodeConfig.config.authType || 'none'"
                                            t-on-change="(ev) => this.updateAuthType(state.selectedNode,
                                             ev.target.value)">
                                        <option value="none">None</option>
                                        <option value="basic">Basic Auth</option>
                                        <option value="bearer">Bearer Token</option>
                                        <option value="api-key">API Key</option>
                                    </select>

                                    <!-- Basic Auth Fields -->
                                    <t t-if="nodeConfig.config.authType === 'basic'">
                                        <label class="config-label">Username</label>
                                        <input type="text"
                                               class="config-input"
                                               placeholder="user"
                                               t-att-value="nodeConfig.config.username || ''"
                                               t-on-input="(ev) => this.updateNodeConfig(state.selectedNode,'username', ev.target.value)"/>

                                        <label class="config-label">Password</label>
                                        <input type="password"
                                               class="config-input"
                                               placeholder="password"
                                               t-att-value="nodeConfig.config.password || ''"
                                               t-on-input="(ev) => this.updateNodeConfig(state.selectedNode,'password', ev.target.value)"/>
                                    </t>

                                    <!-- Bearer Token Fields -->
                                    <t t-if="nodeConfig.config.authType === 'bearer'">
                                        <label class="config-label">Bearer Token</label>
                                        <input type="text"
                                               class="config-input"
                                               placeholder="eyJhbGciOiJIUzI1Ni..."
                                               t-att-value="nodeConfig.config.token || ''"
                                               t-on-input="(ev) => this.updateNodeConfig(state.selectedNode,'token', ev.target.value)"/>
                                    </t>

                                    <!-- API Key Fields -->
                                    <t t-if="nodeConfig.config.authType === 'api-key'">
                                        <label class="config-label">API Key</label>
                                        <input type="text"
                                               class="config-input"
                                               placeholder="YourSecretKey"
                                               t-att-value="nodeConfig.config.apiKey || ''"
                                               t-on-input="(ev) => this.updateNodeConfig(state.selectedNode, 'apiKey', ev.target.value)"/>

                                        <label class="config-label">Key Location</label>
                                        <select class="config-select"
                                                t-att-value="nodeConfig.config.keyLocation || 'header'"
                                                t-on-change="(ev) => this.updateNodeConfig(state.selectedNode,'keyLocation','authType',
                                                 ev.target.value)">
                                            <option value="header">Header</option>
                                            <option value="query">Query Parameter</option>
                                        </select>
                                    </t>

                                    <t t-if="nodeConfig.config.authType === 'none'">
                                        <div style="font-size: 0.8rem; opacity: 0.8; padding: 10px; text-align: center;">
                                            No authentication is required.
                                        </div>
                                    </t>

                                    <div class="help-text">Configure the security parameters for the API.</div>
                                </div>
                            </t>

                            <!-- HTTP Methods Configuration (GET, POST, PUT, DELETE) -->
                            <t t-if="['get', 'post', 'put', 'delete'].includes(nodeConfig.type)">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">🌐</span>
                                        Endpoint Details
                                    </div>
                                    <label class="config-label">API URL Path</label>
                                    <input type="text"
                                           class="config-input"
                                           placeholder="/api/users"
                                           t-att-value="nodeConfig.config.url || ''"
                                           t-on-input="(ev) => this.updateNodeConfig(state.selectedNode, 'url', ev.target.value)"/>
                                    <div class="help-text">The relative path or full URL for the API call.</div>
                                </div>

                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">📡</span>
                                        Request Details
                                    </div>
                                    <label class="config-label">HTTP Method</label>
                                    <div style="font-size: 1.5rem; font-weight: bold; color: #00f2fe; text-align: center; padding: 10px; background: rgba(0,242,254,0.1); border-radius: 6px;">
                                        <t t-esc="nodeConfig.type.toUpperCase()"/>
                                    </div>
                                    <label class="config-label" style="margin-top: 12px;">Timeout (ms)</label>
                                    <input type="number"
                                           class="config-input"
                                           placeholder="10000"
                                           t-att-value="nodeConfig.config.timeout || 10000"
                                           t-on-input="(ev) => this.updateNodeConfig('timeout', parseInt(ev.target.value))"/>
                                    <div class="help-text">Time (in milliseconds) before the request is aborted.</div>
                                </div>

                                <!-- Request Body for POST/PUT -->
                                <!--                                <t t-if="nodeConfig.type === 'post' or nodeConfig.type === 'put'">-->
                                <!--                                    <div class="config-section">-->
                                <!--                                        <div class="section-title">-->
                                <!--                                            <span class="section-icon">📝</span>-->
                                <!--                                            Request Body (JSON)-->
                                <!--                                        </div>-->
                                <!--                                        <div class="help-text">Enter the JSON payload for POST/PUT requests. Use double-->
                                <!--                                            quotes for keys and string values.-->
                                <!--                                        </div>-->
                                <!--                                        <div class="template-buttons">-->
                                <!--                                            <button class="template-btn"-->
                                <!--                                                    t-on-click="() => this.applyBodyTemplate(state.selectedNode, 'object')">-->
                                <!--                                                { "key": "value" }-->
                                <!--                                            </button>-->
                                <!--                                            <button class="template-btn"-->
                                <!--                                                    t-on-click="() => this.applyBodyTemplate(state.selectedNode, 'array')">-->
                                <!--                                                [ { "item": 1 } ]-->
                                <!--                                            </button>-->
                                <!--                                        </div>-->
                                <!--                                        <label class="config-label">JSON Payload</label>-->
                                <!--                                        <textarea class="config-textarea"-->
                                <!--                                                  placeholder='{"key": "value"}'-->
                                <!--                                                  t-att-value="nodeConfig.config.body || ''"-->
                                <!--                                                  t-on-input="(ev) => this.updateNodeConfig('body', ev.target.value)"></textarea>-->
                                <!--                                    </div>-->
                                <!--                                </t>-->
                                <t t-if="nodeConfig.type === 'post' or nodeConfig.type === 'put'">
                                    <div class="config-section">
                                        <div class="section-title">
                                            <span class="section-icon">📝</span>
                                            Request Body
                                        </div>

                                        <!-- Body Type Selection -->
                                        <div class="config-section">
                                            <div class="section-title">
                                                <span class="section-icon">🔘</span>
                                                Body Format
                                            </div>
                                            <label class="config-label">Body Type</label>
                                            <div class="body-type-selector">
                                                <label class="radio-label">
                                                    <input type="radio"
                                                           name="bodyType"
                                                           value="json"
                                                           t-att-checked="nodeConfig.config.bodyType !== 'form'"
                                                           t-on-change="(ev) => this.updateBodyType('json')"/>
                                                    <span class="radio-custom"></span>
                                                    JSON Raw
                                                </label>
                                                <label class="radio-label">
                                                    <input type="radio"
                                                           name="bodyType"
                                                           value="form"
                                                           t-att-checked="nodeConfig.config.bodyType === 'form'"
                                                           t-on-change="(ev) => this.updateBodyType('form')"/>
                                                    <span class="radio-custom"></span>
                                                    Form Data
                                                </label>
                                            </div>
                                            <div class="help-text">Choose between raw JSON or form-based data
                                                structure
                                            </div>
                                        </div>

                                        <!-- JSON Structure -->
                                        <t t-if="nodeConfig.config.bodyType !== 'form'">
                                            <div class="config-section">
                                                <div class="section-title">
                                                    <span class="section-icon">📄</span>
                                                    JSON Payload
                                                </div>
                                                <div class="help-text">Enter the JSON payload for POST/PUT requests. Use
                                                    double quotes for keys and string values.
                                                </div>
                                                <div class="template-buttons">
                                                    <button class="template-btn"
                                                            t-on-click="() => this.applyBodyTemplate('object')">
                                                        { "key": "value" }
                                                    </button>
                                                    <button class="template-btn"
                                                            t-on-click="() => this.applyBodyTemplate('array')">
                                                        [ { "item": 1 } ]
                                                    </button>
                                                    <button class="template-btn"
                                                            t-on-click="() => this.formManager.convertFormToJson()">
                                                        🔄 From Form
                                                    </button>
                                                </div>
                                                <label class="config-label">JSON Payload</label>
                                                <textarea class="config-textarea json-payload"
                                                          placeholder='{"key": "value"}'
                                                          t-att-value="nodeConfig.config.body || ''"
                                                          t-on-input="(ev) => this.updateNodeConfig('body', ev.target.value)"></textarea>
                                            </div>
                                        </t>

                                        <!-- Form Structure -->
                                        <t t-if="nodeConfig.config.bodyType === 'form'">
                                            <div class="config-section">
                                                <div class="section-title">
                                                    <span class="section-icon">📋</span>
                                                    Form Data Structure
                                                </div>
                                                <div class="help-text">Add key-value pairs for your request body. These
                                                    will be converted to JSON format.
                                                </div>

                                                <!-- Add Field Button at TOP -->
                                                <div class="form-header-actions">
                                                    <t t-if="formManager.hasFormFields(state.selectedNode)">
                                                        <button class="clear-all-fields-btn"
                                                                t-on-click="formManager.clearAllFormFields">
                                                            🗑️ Clear All
                                                        </button>
                                                    </t>
                                                </div>

                                                <!-- Form Fields List -->
                                                <div class="form-fields-container">
                                                    <t t-if="!formManager.hasFormFields(state.selectedNode)">
                                                        <div class="no-fields-message">
                                                            <div class="no-fields-icon">📝</div>
                                                            <h4>No Form Fields Added</h4>
                                                            <p>Click "Add New Field" above to start building your form
                                                                data structure
                                                            </p>
                                                        </div>
                                                    </t>

                                                    <t t-foreach="nodeConfig.config.formFields" t-as="field"
                                                       t-key="field_index">
                                                        <div class="form-field-row">
                                                            <div class="form-field-inputs">
                                                                <div class="input-group">
                                                                    <label class="input-label">Field Name (Key)</label>
                                                                    <input type="text"
                                                                           class="config-input form-field-key"
                                                                           placeholder="Enter field name (e.g., username, email, age)"
                                                                           t-att-value="field.key"
                                                                           t-on-input="(ev) => formManager.updateFormField(field_index, 'key', ev.target.value)"/>
                                                                </div>
                                                                <div class="input-group">
                                                                    <label class="input-label">Field Value</label>
                                                                    <input type="text"
                                                                           class="config-input form-field-value"
                                                                           placeholder="Enter field value (e.g., john_doe, user@example.com, 25)"
                                                                           t-att-value="field.value"
                                                                           t-on-input="(ev) => formManager.updateFormField(field_index, 'value', ev.target.value)"/>
                                                                </div>
                                                                <div class="form-field-header">
                                                                    <button class="remove-form-field-btn"
                                                                            t-on-click="() => formManager.removeFormField(field_index)"
                                                                            title="Remove this field">
                                                                        🗑️ Remove
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </t>
                                                </div>

                                                <!-- Bottom Actions -->
                                                <t t-if="formManager.hasFormFields(state.selectedNode)">
                                                    <div class="form-footer-actions">
                                                        <button class="add-form-field-btn"
                                                                t-on-click="formManager.addFormField">
                                                            ➕ Add Another Field
                                                        </button>
                                                        <button class="convert-to-json-btn"
                                                                t-on-click="formManager.convertFormToJson">
                                                            🔄 Convert to JSON
                                                        </button>
                                                    </div>

                                                    <!-- JSON Preview -->
                                                    <div class="config-section">
                                                        <div class="section-title">
                                                            <span class="section-icon">👁️</span>
                                                            JSON Preview
                                                        </div>
                                                        <label class="config-label">Generated JSON</label>
                                                        <div class="json-preview">
                                                            <t t-esc="formManager.generateJsonFromForm(nodeConfig.config.formFields)"/>
                                                        </div>
                                                    </div>
                                                </t>
                                            </div>
                                        </t>
                                    </div>
                                </t>
                                <!-- Test Button and Response Area -->
                                <button class="test-button" t-on-click="() => this.runApiTest(state.selectedNode)">
                                    ⚡ Run API Test
                                </button>
                                <label class="config-label" style="margin-top: 15px;">API Response</label>
                                <div class="response-area" t-att-id="'response-area-' + state.selectedNode">
                                    No test run yet.
                                </div>
                            </t>

                            <!-- Authentication Node Config -->
                            <t t-if="nodeConfig.type === 'auth'">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">🔐</span>
                                        Authentication Configuration
                                    </div>
                                    <label class="config-label">Auth Type</label>
                                    <select class="config-select"
                                            t-att-value="nodeConfig.config.authType || 'none'"
                                            t-on-change="(ev) => this.updateAuthType(state.selectedNode,
                                             ev.target.value)">
                                        <option value="none">None</option>
                                        <option value="basic">Basic Auth</option>
                                        <option value="bearer">Bearer Token</option>
                                        <option value="api-key">API Key</option>
                                    </select>

                                    <!-- Dynamic Auth Fields -->
                                    <t t-if="nodeConfig.config.authType === 'basic'">
                                        <label class="config-label">Username</label>
                                        <input type="text"
                                               class="config-input"
                                               placeholder="user"
                                               t-att-value="nodeConfig.config.username || ''"
                                               t-on-input="(ev) => this.updateNodeConfig('username', ev.target.value)"/>

                                        <label class="config-label">Password</label>
                                        <input type="password"
                                               class="config-input"
                                               placeholder="password"
                                               t-att-value="nodeConfig.config.password || ''"
                                               t-on-input="(ev) => this.updateNodeConfig('password', ev.target.value)"/>
                                    </t>

                                    <t t-if="nodeConfig.config.authType === 'bearer'">
                                        <label class="config-label">Bearer Token</label>
                                        <input type="text"
                                               class="config-input"
                                               placeholder="eyJhbGciOiJIUzI1Ni..."
                                               t-att-value="nodeConfig.config.token || ''"
                                               t-on-input="(ev) => this.updateNodeConfig('token', ev.target.value)"/>
                                    </t>

                                    <t t-if="nodeConfig.config.authType === 'api-key'">
                                        <label class="config-label">API Key</label>
                                        <input type="text"
                                               class="config-input"
                                               placeholder="YourSecretKey"
                                               t-att-value="nodeConfig.config.apiKey || ''"
                                               t-on-input="(ev) => this.updateNodeConfig('apiKey', ev.target.value)"/>

                                        <label class="config-label">Key Location</label>
                                        <select class="config-select"
                                                t-att-value="nodeConfig.config.keyLocation || 'header'"
                                                t-on-change="(ev) => this.updateNodeConfig('keyLocation','authType',
                                                 ev.target.value)">
                                            <option value="header">Header</option>
                                            <option value="query">Query Parameter</option>
                                        </select>
                                    </t>

                                    <t t-if="nodeConfig.config.authType === 'none'">
                                        <div style="font-size: 0.8rem; opacity: 0.8; padding: 10px; text-align: center;">
                                            No authentication is required.
                                        </div>
                                    </t>

                                    <div class="help-text">Configure the security parameters for the API.</div>
                                </div>
                            </t>

                            <!-- Query Parameters Node Config -->
                            <t t-if="nodeConfig.type === 'params'">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">❓</span>
                                        Query Parameters
                                    </div>
                                    <div class="help-text">Add query parameters (e.g., `?userId=1`). Key and Value are
                                        added to the URL.
                                    </div>

                                    <!-- Parameters List -->
                                    <div class="param-builder">
                                        <t t-foreach="nodeConfig.config.params || []" t-as="param" t-key="param_index">
                                            <div class="param-item">
                                                <span t-esc="param.key + ': ' + param.value"/>
                                                <span class="remove-btn"
                                                      t-on-click="() => this.removeParam(state.selectedNode, 'params', param_index)">
                                                    ×
                                                </span>
                                            </div>
                                        </t>
                                    </div>

                                    <label class="config-label">Parameter Key</label>
                                    <input type="text"
                                           class="config-input"
                                           placeholder="key_name"
                                           t-att-id="'param-key-' + state.selectedNode"/>

                                    <label class="config-label">Parameter Value</label>
                                    <input type="text"
                                           class="config-input"
                                           placeholder="value_content"
                                           t-att-id="'param-value-' + state.selectedNode"/>

                                    <button class="add-btn"
                                            t-on-click="() => this.addParamFromInputs(state.selectedNode, 'params')">
                                        + Add Parameter
                                    </button>
                                </div>
                            </t>

                            <!-- Headers Node Config -->
                            <t t-if="nodeConfig.type === 'headers'">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">📋</span>
                                        Custom Headers
                                    </div>
                                    <div class="help-text">Add custom HTTP headers (e.g., `Content-Type:
                                        application/json`).
                                    </div>

                                    <!-- Headers List -->
                                    <div class="param-builder">
                                        <t t-foreach="nodeConfig.config.headers || []" t-as="header"
                                           t-key="header_index">
                                            <div class="param-item">
                                                <span t-esc="header.key + ': ' + header.value"/>
                                                <span class="remove-btn"
                                                      t-on-click="() => this.removeParam(state.selectedNode, 'headers', header_index)">
                                                    ×
                                                </span>
                                            </div>
                                        </t>
                                    </div>

                                    <label class="config-label">Header Key</label>
                                    <input type="text"
                                           class="config-input"
                                           placeholder="Content-Type"
                                           t-att-id="'header-key-' + state.selectedNode"/>

                                    <label class="config-label">Header Value</label>
                                    <input type="text"
                                           class="config-input"
                                           placeholder="application/json"
                                           t-att-id="'header-value-' + state.selectedNode"/>

                                    <button class="add-btn"
                                            t-on-click="() => this.addParamFromInputs(state.selectedNode, 'headers')">
                                        + Add Header
                                    </button>
                                </div>
                            </t>

                            <!-- Request Body Node Config -->
                            <t t-if="nodeConfig.type === 'body'">
                                <div class="config-section">
                                    <div class="section-title">
                                        <span class="section-icon">📝</span>
                                        Request Body (JSON)
                                    </div>
                                    <div class="help-text">Enter the JSON payload for POST/PUT requests. Use double
                                        quotes for keys and string values.
                                    </div>
                                    <div class="template-buttons">
                                        <button class="template-btn"
                                                t-on-click="() => this.applyBodyTemplate(state.selectedNode, 'object')">
                                            { "key": "value" }
                                        </button>
                                        <button class="template-btn"
                                                t-on-click="() => this.applyBodyTemplate(state.selectedNode, 'array')">[
                                            { "item": 1 } ]
                                        </button>
                                    </div>
                                    <label class="config-label">JSON Payload</label>
                                    <textarea class="config-textarea"
                                              placeholder='{"key": "value"}'
                                              t-att-value="nodeConfig.config.body || ''"
                                              t-on-input="(ev) => this.updateNodeConfig('body', ev.target.value)"></textarea>
                                </div>
                            </t>
                        </t>
                    </t>
                    <t t-else="">
                        <div class="empty-config">
                            <div class="empty-config-icon">🎯</div>
                            <h3>Select a Node</h3>
                            <p>Click on any node in your workflow to configure its settings and parameters here.</p>
                        </div>
                    </t>
                </div>
            </div>
        </div>
    </t>
</odoo>